generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bill_payments {
  payment_id   Int             @id @default(autoincrement())
  amount       Decimal         @db.Decimal(12, 2)
  payment_date DateTime?       @default(now()) @db.Timestamp(6)
  method       payment_method?
  status       payment_status? @default(completed)
  reference    String?         @db.VarChar(255)
  paid_by      Int?
  note         String?         @db.VarChar(500)
  users        users?          @relation(fields: [paid_by], references: [user_id], map: "fk_bill_payments_paid_by")
  bills        bills[]

  @@index([paid_by], map: "idx_bill_payments_paid_by")
}

model bills {
  bill_id              Int            @id @default(autoincrement())
  tenant_user_id       Int
  payment_id           Int?
  bill_number          String         @unique @db.VarChar(100)
  billing_period_start DateTime?      @db.Date
  billing_period_end   DateTime?      @db.Date
  due_date             DateTime?      @db.Date
  total_amount         Decimal?       @default(0) @db.Decimal(12, 2)
  paid_amount          Decimal?       @default(0) @db.Decimal(12, 2)
  status               bill_status?   @default(draft)
  description          String?
  is_recurring         Boolean?       @default(false)
  created_by           Int?
  created_at           DateTime?      @default(now()) @db.Timestamp(6)
  updated_at           DateTime?      @db.Timestamp(6)
  deleted_at           DateTime?      @db.Timestamp(6)
  users                users?         @relation(fields: [created_by], references: [user_id], onDelete: SetNull, map: "fk_bills_created_by")
  bill_payments        bill_payments? @relation(fields: [payment_id], references: [payment_id], map: "fk_bills_payment")
  tenants              tenants        @relation(fields: [tenant_user_id], references: [user_id], map: "fk_bills_tenant")

  @@index([status], map: "idx_bills_status")
  @@index([tenant_user_id], map: "idx_bills_tenant_user_id")
}

model building_managers {
  user_id       Int       @id
  building_id   Int
  assigned_from DateTime? @db.Date
  assigned_to   DateTime? @db.Date
  note          String?   @db.VarChar(255)
  buildings     buildings @relation(fields: [building_id], references: [building_id], onDelete: Cascade, map: "fk_building_managers_building")
  users         users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_building_managers_user")

  @@index([building_id], map: "idx_building_managers_building_id")
  @@index([user_id], map: "idx_building_managers_user_id")
}

model building_owner {
  user_id    Int       @id
  notes      String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_building_owner_user")
}

model buildings {
  building_id       Int                 @id @default(autoincrement())
  name              String              @db.VarChar(200)
  address           String?             @db.VarChar(300)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @db.Timestamp(6)
  is_active         Boolean?            @default(true)
  building_managers building_managers[]
  floor_plans       floor_plans[]
  regulations       regulations[]
  rooms             rooms[]
}

model contract_addendums {
  addendum_id    Int            @id @default(autoincrement())
  contract_id    Int
  type           addendum_type? @default(general)
  version        Int?           @default(1)
  summary        String?        @db.VarChar(500)
  changes        Json?
  effective_date DateTime?      @db.Date
  created_by     Int
  created_at     DateTime?      @default(now()) @db.Timestamp(6)
  note           String?
  contracts      contracts      @relation(fields: [contract_id], references: [contract_id], onDelete: Cascade, map: "fk_addendum_contract")
  users          users          @relation(fields: [created_by], references: [user_id], onDelete: SetNull, map: "fk_addendum_created_by_user")

  @@index([contract_id], map: "idx_contract_addendums_contract_id")
  @@index([created_by], map: "idx_contract_addendums_created_by")
}

model contracts {
  contract_id        Int                  @id @default(autoincrement())
  room_id            Int
  tenant_user_id     Int
  start_date         DateTime?            @db.Date
  end_date           DateTime?            @db.Date
  rent_amount        Decimal?             @db.Decimal(12, 2)
  deposit_amount     Decimal?             @db.Decimal(12, 2)
  status             contract_status?     @default(pending)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  note               String?
  contract_addendums contract_addendums[]
  rooms              rooms                @relation(fields: [room_id], references: [room_id], map: "fk_contracts_room")
  tenants            tenants              @relation(fields: [tenant_user_id], references: [user_id], map: "fk_contracts_tenant")

  @@index([room_id], map: "idx_contracts_room_id")
  @@index([tenant_user_id], map: "idx_contracts_tenant_user_id")
}

model floor_plans {
  plan_id      Int       @id @default(autoincrement())
  building_id  Int
  name         String?   @db.VarChar(200)
  floor_number Int?
  version      Int?      @default(1)
  layout       Json?
  file_url     String?   @db.VarChar(1000)
  is_published Boolean?  @default(false)
  created_by   Int
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @db.Timestamp(6)
  note         String?
  buildings    buildings @relation(fields: [building_id], references: [building_id], onDelete: Cascade, map: "fk_floor_plans_building")
  users        users     @relation(fields: [created_by], references: [user_id], onDelete: SetNull, map: "fk_floor_plans_created_by")

  @@unique([building_id, floor_number, version], map: "floor_plans_unique_building_floor_version")
  @@index([building_id], map: "idx_floor_plans_building_id")
}

model guest_registrations {
  registration_id                               Int           @id @default(autoincrement())
  host_user_id                                  Int
  guest_name                                    String        @db.VarChar(200)
  id_number                                     String?       @db.VarChar(100)
  contact                                       String?       @db.VarChar(100)
  guest_count                                   Int?          @default(1)
  room_id                                       Int?
  arrival_date                                  DateTime?     @db.Date
  departure_date                                DateTime?     @db.Date
  status                                        guest_status? @default(pending)
  note                                          String?
  created_at                                    DateTime?     @default(now()) @db.Timestamp(6)
  submitted_at                                  DateTime?     @db.Timestamp(6)
  approved_by                                   Int?
  approved_at                                   DateTime?     @db.Timestamp(6)
  cancelled_at                                  DateTime?     @db.Timestamp(6)
  cancelled_by                                  Int?
  cancellation_reason                           String?       @db.VarChar(500)
  users_guest_registrations_approved_byTousers  users?        @relation("guest_registrations_approved_byTousers", fields: [approved_by], references: [user_id], map: "fk_guest_approved_by")
  users_guest_registrations_cancelled_byTousers users?        @relation("guest_registrations_cancelled_byTousers", fields: [cancelled_by], references: [user_id], map: "fk_guest_cancelled_by")
  tenants                                       tenants       @relation(fields: [host_user_id], references: [user_id], onDelete: Cascade, map: "fk_guest_host")
  rooms                                         rooms?        @relation(fields: [room_id], references: [room_id], map: "fk_guest_room")

  @@index([host_user_id], map: "idx_guest_registrations_host_user_id")
  @@index([room_id], map: "idx_guest_registrations_room_id")
  @@index([status], map: "idx_guest_registrations_status")
}

model maintenance_requests {
  request_id     Int                   @id @default(autoincrement())
  tenant_user_id Int
  room_id        Int?
  title          String                @db.VarChar(200)
  description    String?
  category       maintenance_category?
  priority       maintenance_priority? @default(normal)
  status         maintenance_status?   @default(pending)
  assigned_to    Int?
  created_at     DateTime?             @default(now()) @db.Timestamp(6)
  updated_at     DateTime?             @db.Timestamp(6)
  resolved_at    DateTime?             @db.Timestamp(6)
  note           String?
  users          users?                @relation(fields: [assigned_to], references: [user_id], map: "fk_maint_assigned_to")
  rooms          rooms?                @relation(fields: [room_id], references: [room_id], map: "fk_maint_room")
  tenants        tenants               @relation(fields: [tenant_user_id], references: [user_id], onDelete: Cascade, map: "fk_maint_tenant")

  @@index([assigned_to], map: "idx_maintenance_requests_assigned_to")
  @@index([room_id], map: "idx_maintenance_requests_room_id")
  @@index([status], map: "idx_maintenance_requests_status")
  @@index([tenant_user_id], map: "idx_maintenance_requests_tenant_user_id")
}

model notifications {
  notification_id  Int                    @id @default(autoincrement())
  title            String?                @db.VarChar(300)
  body             Json?
  priority         notification_priority? @default(normal)
  payload          Json?
  send_immediately Boolean?               @default(true)
  scheduled_at     DateTime?              @db.Timestamp(6)
  status           notification_status?   @default(queued)
  created_by       Int?
  created_at       DateTime?              @default(now()) @db.Timestamp(6)
  sent_at          DateTime?              @db.Timestamp(6)
  note             String?
  users            users?                 @relation(fields: [created_by], references: [user_id], map: "fk_notifications_created_by")

  @@index([created_by], map: "idx_notifications_created_by")
  @@index([scheduled_at], map: "idx_notifications_scheduled_at")
  @@index([status], map: "idx_notifications_status")
}

model regulations {
  regulation_id  Int                @id @default(autoincrement())
  title          String             @db.VarChar(255)
  content        String?
  building_id    Int?
  effective_date DateTime?          @db.Date
  version        Int?               @default(1)
  status         regulation_status? @default(draft)
  created_by     Int
  created_at     DateTime?          @default(now()) @db.Timestamp(6)
  updated_at     DateTime?          @db.Timestamp(6)
  archived_at    DateTime?          @db.Timestamp(6)
  note           String?
  buildings      buildings?         @relation(fields: [building_id], references: [building_id], map: "fk_regulations_building")
  users          users              @relation(fields: [created_by], references: [user_id], onDelete: SetNull, map: "fk_regulations_created_by")

  @@index([building_id], map: "idx_regulations_building_id")
  @@index([status], map: "idx_regulations_status")
}

model rooms {
  room_id              Int                    @id @default(autoincrement())
  building_id          Int
  room_number          String                 @db.VarChar(50)
  floor                Int?
  size                 String?                @db.VarChar(50)
  description          String?
  is_active            Boolean?               @default(true)
  contracts            contracts[]
  guest_registrations  guest_registrations[]
  maintenance_requests maintenance_requests[]
  buildings            buildings              @relation(fields: [building_id], references: [building_id], map: "fk_rooms_building")

  @@unique([building_id, room_number], map: "rooms_building_room_unique")
  @@index([building_id], map: "idx_rooms_building_id")
}

model tenants {
  user_id                   Int                         @id
  tenant_since              DateTime?                   @db.Date
  emergency_contact_phone   String?                     @db.VarChar(20)
  id_number                 String                      @unique @db.VarChar(50)
  note                      String?
  bills                     bills[]
  contracts                 contracts[]
  guest_registrations       guest_registrations[]
  maintenance_requests      maintenance_requests[]
  users                     users                       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_tenants_user")
  vehicle_slot_registration vehicle_slot_registration[]
  vehicles                  vehicles[]                  @relation("TenantVehiclesRelation")
}

model users {
  user_id                                                     Int                         @id @default(autoincrement())
  phone                                                       String                      @unique @db.VarChar(20)
  email                                                       String                      @unique @db.VarChar(200)
  password_hash                                               String                      @db.VarChar(255)
  full_name                                                   String?                     @db.VarChar(200)
  gender                                                      String?                     @db.VarChar(10)
  birthday                                                    DateTime?                   @db.Date
  avatar_url                                                  String?                     @db.VarChar(255)
  status                                                      String?                     @default("Active") @db.VarChar(20)
  created_at                                                  DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at                                                  DateTime?                   @db.Timestamp(6)
  deleted_at                                                  DateTime?                   @db.Timestamp(6)
  bill_payments                                               bill_payments[]
  bills                                                       bills[]
  building_managers                                           building_managers?
  building_owner                                              building_owner?
  contract_addendums                                          contract_addendums[]
  floor_plans                                                 floor_plans[]
  guest_registrations_guest_registrations_approved_byTousers  guest_registrations[]       @relation("guest_registrations_approved_byTousers")
  guest_registrations_guest_registrations_cancelled_byTousers guest_registrations[]       @relation("guest_registrations_cancelled_byTousers")
  maintenance_requests                                        maintenance_requests[]
  notifications                                               notifications[]
  regulations                                                 regulations[]
  tenants                                                     tenants?
  vehicle_slot_registration                                   vehicle_slot_registration[]
  vehicles                                                    vehicles[]
  is_verified                                                 Boolean?                    @default(false)
}

model vehicle_slot_registration {
  assignment_id Int                  @id @default(autoincrement())
  vehicle_id    Int
  requested_by  Int
  requested_at  DateTime?            @default(now()) @db.Timestamp(6)
  status        registration_status? @default(requested)
  approved_by   Int?
  approved_at   DateTime?            @db.Timestamp(6)
  start_date    DateTime?            @db.Date
  end_date      DateTime?            @db.Date
  note          String?              @db.VarChar(500)
  users         users?               @relation(fields: [approved_by], references: [user_id], map: "fk_vehicle_slot_approved_by")
  tenants       tenants              @relation(fields: [requested_by], references: [user_id], onDelete: Cascade, map: "fk_vehicle_slot_requested_by")
  vehicles      vehicles             @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade, map: "fk_vehicle_slot_vehicle")

  @@index([requested_by], map: "idx_vehicle_slot_requested_by")
  @@index([status], map: "idx_vehicle_slot_status")
  @@index([vehicle_id], map: "idx_vehicle_slot_vehicle_id")
}

model vehicles {
  vehicle_id                Int                         @id @default(autoincrement())
  tenant_user_id            Int
  type                      vehicle_type?
  status                    registration_status?        @default(requested)
  registered_at             DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at                DateTime?                   @db.Timestamp(6)
  deactivated_at            DateTime?                   @db.Timestamp(6)
  deactivated_by            Int?
  note                      String?
  vehicle_slot_registration vehicle_slot_registration[]
  users                     users?                      @relation(fields: [deactivated_by], references: [user_id], map: "fk_vehicles_deactivated_by")
  tenants                   tenants                     @relation("TenantVehiclesRelation", fields: [tenant_user_id], references: [user_id], onDelete: Cascade, map: "fk_vehicles_tenant")

  @@index([tenant_user_id], map: "idx_vehicles_tenant_user_id")
}

enum addendum_status {
  draft
  pending_approval
  approved
  rejected
  cancelled
}

enum addendum_type {
  extension
  rent_change
  early_termination
  general
  other
}

enum bill_status {
  draft
  issued
  partially_paid
  paid
  overdue
  cancelled
}

enum contract_status {
  pending
  active
  terminated
  expired
}

enum guest_status {
  pending
  approved
  rejected
  cancelled
  expired
}

enum id_type {
  national_id
  passport
  other
}

enum maintenance_category {
  plumbing
  electrical
  hvac
  carpentry
  cleaning
  other
}

enum maintenance_priority {
  low
  normal
  high
  urgent
}

enum maintenance_status {
  pending
  assigned
  in_progress
  on_hold
  resolved
  completed
  cancelled
  rejected
}

enum notification_priority {
  low
  normal
  high
}

enum notification_status {
  queued
  sending
  sent
  delivered
  failed
  cancelled
}

enum payment_method {
  cash
  bank_transfer
  card
  online
  other
}

enum payment_status {
  pending
  completed
  failed
  refunded
}

enum registration_status {
  requested
  approved
  rejected
  cancelled
  expired
}

enum regulation_status {
  draft
  published
  archived
  deleted
}

enum vehicle_type {
  car
  motorcycle
  truck
  van
  other
}
