
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Bill_paymentsScalarFieldEnum = {
  payment_id: 'payment_id',
  amount: 'amount',
  payment_date: 'payment_date',
  method: 'method',
  status: 'status',
  reference: 'reference',
  paid_by: 'paid_by',
  note: 'note'
};

exports.Prisma.BillsScalarFieldEnum = {
  bill_id: 'bill_id',
  tenant_user_id: 'tenant_user_id',
  payment_id: 'payment_id',
  bill_number: 'bill_number',
  billing_period_start: 'billing_period_start',
  billing_period_end: 'billing_period_end',
  due_date: 'due_date',
  total_amount: 'total_amount',
  paid_amount: 'paid_amount',
  status: 'status',
  description: 'description',
  is_recurring: 'is_recurring',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Building_managersScalarFieldEnum = {
  user_id: 'user_id',
  building_id: 'building_id',
  assigned_from: 'assigned_from',
  assigned_to: 'assigned_to',
  note: 'note'
};

exports.Prisma.Building_ownerScalarFieldEnum = {
  user_id: 'user_id',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.BuildingsScalarFieldEnum = {
  building_id: 'building_id',
  name: 'name',
  address: 'address',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_active: 'is_active'
};

exports.Prisma.Contract_addendumsScalarFieldEnum = {
  addendum_id: 'addendum_id',
  contract_id: 'contract_id',
  type: 'type',
  version: 'version',
  summary: 'summary',
  changes: 'changes',
  effective_date: 'effective_date',
  created_by: 'created_by',
  created_at: 'created_at',
  note: 'note'
};

exports.Prisma.ContractsScalarFieldEnum = {
  contract_id: 'contract_id',
  room_id: 'room_id',
  tenant_user_id: 'tenant_user_id',
  start_date: 'start_date',
  end_date: 'end_date',
  rent_amount: 'rent_amount',
  deposit_amount: 'deposit_amount',
  status: 'status',
  created_at: 'created_at',
  note: 'note'
};

exports.Prisma.Floor_plansScalarFieldEnum = {
  plan_id: 'plan_id',
  building_id: 'building_id',
  name: 'name',
  floor_number: 'floor_number',
  version: 'version',
  layout: 'layout',
  file_url: 'file_url',
  is_published: 'is_published',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  note: 'note'
};

exports.Prisma.Guest_registrationsScalarFieldEnum = {
  registration_id: 'registration_id',
  host_user_id: 'host_user_id',
  guest_name: 'guest_name',
  id_number: 'id_number',
  contact: 'contact',
  guest_count: 'guest_count',
  room_id: 'room_id',
  arrival_date: 'arrival_date',
  departure_date: 'departure_date',
  status: 'status',
  note: 'note',
  created_at: 'created_at',
  submitted_at: 'submitted_at',
  approved_by: 'approved_by',
  approved_at: 'approved_at',
  cancelled_at: 'cancelled_at',
  cancelled_by: 'cancelled_by',
  cancellation_reason: 'cancellation_reason'
};

exports.Prisma.Maintenance_requestsScalarFieldEnum = {
  request_id: 'request_id',
  tenant_user_id: 'tenant_user_id',
  room_id: 'room_id',
  title: 'title',
  description: 'description',
  category: 'category',
  priority: 'priority',
  status: 'status',
  assigned_to: 'assigned_to',
  created_at: 'created_at',
  updated_at: 'updated_at',
  resolved_at: 'resolved_at',
  note: 'note'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  notification_id: 'notification_id',
  title: 'title',
  body: 'body',
  priority: 'priority',
  payload: 'payload',
  send_immediately: 'send_immediately',
  scheduled_at: 'scheduled_at',
  status: 'status',
  created_by: 'created_by',
  created_at: 'created_at',
  sent_at: 'sent_at',
  note: 'note'
};

exports.Prisma.RegulationsScalarFieldEnum = {
  regulation_id: 'regulation_id',
  title: 'title',
  content: 'content',
  building_id: 'building_id',
  effective_date: 'effective_date',
  version: 'version',
  status: 'status',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  archived_at: 'archived_at',
  note: 'note'
};

exports.Prisma.RoomsScalarFieldEnum = {
  room_id: 'room_id',
  building_id: 'building_id',
  room_number: 'room_number',
  floor: 'floor',
  size: 'size',
  description: 'description',
  is_active: 'is_active'
};

exports.Prisma.TenantsScalarFieldEnum = {
  user_id: 'user_id',
  tenant_since: 'tenant_since',
  emergency_contact_phone: 'emergency_contact_phone',
  id_number: 'id_number',
  note: 'note'
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  phone: 'phone',
  email: 'email',
  password_hash: 'password_hash',
  full_name: 'full_name',
  gender: 'gender',
  birthday: 'birthday',
  avatar_url: 'avatar_url',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Vehicle_slot_registrationScalarFieldEnum = {
  assignment_id: 'assignment_id',
  vehicle_id: 'vehicle_id',
  requested_by: 'requested_by',
  requested_at: 'requested_at',
  status: 'status',
  approved_by: 'approved_by',
  approved_at: 'approved_at',
  start_date: 'start_date',
  end_date: 'end_date',
  note: 'note'
};

exports.Prisma.VehiclesScalarFieldEnum = {
  vehicle_id: 'vehicle_id',
  tenant_user_id: 'tenant_user_id',
  type: 'type',
  status: 'status',
  registered_at: 'registered_at',
  updated_at: 'updated_at',
  deactivated_at: 'deactivated_at',
  deactivated_by: 'deactivated_by',
  note: 'note'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.payment_method = exports.$Enums.payment_method = {
  cash: 'cash',
  bank_transfer: 'bank_transfer',
  card: 'card',
  online: 'online',
  other: 'other'
};

exports.payment_status = exports.$Enums.payment_status = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded'
};

exports.bill_status = exports.$Enums.bill_status = {
  draft: 'draft',
  issued: 'issued',
  partially_paid: 'partially_paid',
  paid: 'paid',
  overdue: 'overdue',
  cancelled: 'cancelled'
};

exports.addendum_type = exports.$Enums.addendum_type = {
  extension: 'extension',
  rent_change: 'rent_change',
  early_termination: 'early_termination',
  general: 'general',
  other: 'other'
};

exports.contract_status = exports.$Enums.contract_status = {
  pending: 'pending',
  active: 'active',
  terminated: 'terminated',
  expired: 'expired'
};

exports.guest_status = exports.$Enums.guest_status = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  cancelled: 'cancelled',
  expired: 'expired'
};

exports.maintenance_category = exports.$Enums.maintenance_category = {
  plumbing: 'plumbing',
  electrical: 'electrical',
  hvac: 'hvac',
  carpentry: 'carpentry',
  cleaning: 'cleaning',
  other: 'other'
};

exports.maintenance_priority = exports.$Enums.maintenance_priority = {
  low: 'low',
  normal: 'normal',
  high: 'high',
  urgent: 'urgent'
};

exports.maintenance_status = exports.$Enums.maintenance_status = {
  pending: 'pending',
  assigned: 'assigned',
  in_progress: 'in_progress',
  on_hold: 'on_hold',
  resolved: 'resolved',
  completed: 'completed',
  cancelled: 'cancelled',
  rejected: 'rejected'
};

exports.notification_priority = exports.$Enums.notification_priority = {
  low: 'low',
  normal: 'normal',
  high: 'high'
};

exports.notification_status = exports.$Enums.notification_status = {
  queued: 'queued',
  sending: 'sending',
  sent: 'sent',
  delivered: 'delivered',
  failed: 'failed',
  cancelled: 'cancelled'
};

exports.regulation_status = exports.$Enums.regulation_status = {
  draft: 'draft',
  published: 'published',
  archived: 'archived',
  deleted: 'deleted'
};

exports.registration_status = exports.$Enums.registration_status = {
  requested: 'requested',
  approved: 'approved',
  rejected: 'rejected',
  cancelled: 'cancelled',
  expired: 'expired'
};

exports.vehicle_type = exports.$Enums.vehicle_type = {
  car: 'car',
  motorcycle: 'motorcycle',
  truck: 'truck',
  van: 'van',
  other: 'other'
};

exports.Prisma.ModelName = {
  bill_payments: 'bill_payments',
  bills: 'bills',
  building_managers: 'building_managers',
  building_owner: 'building_owner',
  buildings: 'buildings',
  contract_addendums: 'contract_addendums',
  contracts: 'contracts',
  floor_plans: 'floor_plans',
  guest_registrations: 'guest_registrations',
  maintenance_requests: 'maintenance_requests',
  notifications: 'notifications',
  regulations: 'regulations',
  rooms: 'rooms',
  tenants: 'tenants',
  users: 'users',
  vehicle_slot_registration: 'vehicle_slot_registration',
  vehicles: 'vehicles'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
